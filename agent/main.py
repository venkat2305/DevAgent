import base64
import os
from pathlib import Path
import time
from shutil import make_archive


def run_agent_brain(job_id: str, task: str) -> dict:
    """Create a small artifact zip for the job.

    For tasks containing keywords like "GUI" or "DEMO", also emit
    a short, visible progress log to /tmp/agent.log so the noVNC
    session shows activity in the demo terminal.
    """
    # Use /job in Modal containers, local temp for development
    if os.path.exists("/job") or os.environ.get("MODAL_ENVIRONMENT"):
        job_dir = Path("/job")
    else:
        job_dir = Path.cwd() / "test_job"
    
    out_dir = job_dir / "output"
    out_dir.mkdir(parents=True, exist_ok=True)

    # Write a simple file proving the agent executed
    hello = out_dir / "hello.txt"
    hello.write_text(
        f"Job: {job_id}\nTask: {task}\nStatus: generated by agent.\n",
        encoding="utf-8",
    )

    # Optional demo: write a few progress lines for the VNC xterm
    if any(k in task.lower() for k in ("gui", "demo")):
        log_path = Path("/tmp/agent.log")
        for i in range(1, 11):
            line = f"[agent] step {i}/10 for job {job_id}: working on '{task}'\n"
            with open(log_path, "a", encoding="utf-8") as f:
                f.write(line)
                f.flush()
            time.sleep(1)

    # Zip the output directory to /job/output/artifact.zip
    zip_base = job_dir / "output" / "artifact"
    archive_path = make_archive(str(zip_base), "zip", root_dir=str(out_dir))

    # Return the artifact bytes (base64) so orchestrator can serve it
    data = Path(archive_path).read_bytes()
    b64 = base64.b64encode(data).decode("ascii")
    return {
        "success": True,
        "artifact_filename": "artifact.zip",
        "artifact_b64": b64,
    }


if __name__ == "__main__":
    result = run_agent_brain("test-job", "Test task")
    print("Result:", result)
